<?php

namespace LSoft\AdBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\DataCollector\DataCollectorInterface;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Class Ad
 * @package LSoft\AdBundle\Entity
 *
 * @ORM\Entity(repositoryClass="LSoft\AdBundle\Entity\Repository\AdRepository")
 * @ORM\Table(name="ad_analytics_provider")
 * @ORM\HasLifecycleCallbacks()
 * @UniqueEntity("code", message="code.duplicate")
 */
class AdAnalyticsProvider
{
    /**
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     *
     */
    protected $id;

    /**
     * @var
     * @ORM\ManyToOne(targetEntity="LSoft\AdBundle\Entity\Ad")
     * @ORM\JoinColumn(fieldName="ad_id", referencedColumnName="id")
     */
    protected $ad;

    /**
     * @ORM\Column(name="created", type="datetime", nullable=false)
     */
    protected $created;

    /**
     * @ORM\Column(name="updated", type="datetime", nullable=false)
     */
    protected $updated;

    /**
     * @var
     * @ORM\Column(name="visits", type="integer", nullable=false)
     */
    protected $visits;

    /**
     * @ORM\PrePersist()
     */
    public function preUpload()
    {
        $this->created = new \DateTime('now');
        $this->updated = new \DateTime('now');
    }

    /**
     * @ORM\PreUpdate()
     */
    public function preUpdate()
    {
        $this->updated = new \DateTime('now');
    }

    /**
     * The __toString method allows a class to decide how it will react when it is converted to a string.
     *
     * @return string
     */
    function __toString()
    {
        return $this->ad ? $this->ad->getName() : '';
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
}
